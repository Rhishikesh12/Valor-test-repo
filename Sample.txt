Are you using a Stream of unknown length as the Body of a PutObject request? Consider using Upload instead from @aws-sdk/lib-storage.
Uploaded video-360p.mp4
Are you using a Stream of unknown length as the Body of a PutObject request? Consider using Upload instead from @aws-sdk/lib-storage.
Uploaded video-480p.mp4
Are you using a Stream of unknown length as the Body of a PutObject request? Consider using Upload instead from @aws-sdk/lib-storage.
Uploaded video-720p.mp4


// old Code 
// async function init() {
//     const command = new ReceiveMessageCommand({
//         QueueUrl: process.env.SQS_QUEUE_URL!,
//         MaxNumberOfMessages: 1,
//         WaitTimeSeconds: 10,
//     })

//     try {
//         while (true) {
//             const {Messages} = await client.send(command);
//             if(!Messages) {
//                 console.log("No messages to process");
//                 continue;
//             }

//             for (const message of Messages) {
//                 const {MessageId, Body} = message;
//                 console.log(`Message Received, MessageID: ${MessageId}, Body: ${Body}`);

//                 if(!Body) {
//                     console.log("Message Body is empty, skipping...");
//                     continue;
//                 }
//                 // Validate & parse the Event
//                 const event = JSON.parse(Body) as S3Event;

//                 //Ignore Test Events
//                 if("Service" in event && "Event" in event) {
//                     if(event.Event === "s3:TestEvent"){
//                         await client.send(new DeleteMessageCommand({
//                             QueueUrl: process.env.SQS_QUEUE_URL!, 
//                             ReceiptHandle: message.ReceiptHandle!
//                         }));
//                         continue;
//                     }
//                 }

                
//                 for(const record of event.Records) {
//                     const {s3} = record;
//                     const {bucket, object:{key}} = s3;
//                     //Spin up a new container to process the event
                    
//                     const runTaskCommand = new RunTaskCommand({
//                         taskDefinition: "arn:aws:ecs:us-east-1:183631315724:task-definition/video-transcoder",
//                         cluster: "arn:aws:ecs:us-east-1:183631315724:cluster/Development",
//                         launchType: "FARGATE",
//                         networkConfiguration: {
//                             awsvpcConfiguration: {
//                                 assignPublicIp: "ENABLED",
//                                 securityGroups: ["sg-0d19e3b522dba6baa"],
//                                 subnets: ["subnet-09c9cc33a961f65c5","subnet-0fc260878341acdf8","subnet-0871a70bd76db9b24"],
//                             }
//                         },
//                         // overrides: {
//                         //     containerOverrides: [{name: "video-transcoder", environment: [{name: "BUCKET", value: bucket.name}, {name: "KEY", value: key}]}]
//                         // },
//                         overrides: {
//                             containerOverrides: [{
//                                 name: "video-transcoder",
//                                 environment: [
//                                     { name: "BUCKET", value: bucket.name },
//                                     { name: "KEY", value: key }
//                                 ]
//                             }]
//                         }
//                     })
//                     // await ecsClient.send(runTaskCommand);
//                     try {
//                         await ecsClient.send(runTaskCommand);
//                         return true;
//                     } catch (error) {
//                         console.error(`Failed to start ECS task: ${error}`);
//                         return false;
//                     }
//                 }

//                 // delete the message
//                 await client.send(new DeleteMessageCommand({
//                     QueueUrl: process.env.SQS_QUEUE_URL!, 
//                     ReceiptHandle: message.ReceiptHandle!,
//                 })
//             );
//             }
//         }
//     } catch (error) {
//         console.log(error);
//     }
// }